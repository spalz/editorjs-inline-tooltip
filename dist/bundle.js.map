{"version":3,"sources":["webpack://EditorjsInlineTooltip/webpack/universalModuleDefinition","webpack://EditorjsInlineTooltip/webpack/bootstrap","webpack://EditorjsInlineTooltip/./src/selection.ts","webpack://EditorjsInlineTooltip/./src/index.ts"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SelectionUtils","instance","selection","savedSelectionRange","isFakeBackgroundEnabled","commandBackground","commandRemoveFormat","getSelection","rangeCount","getRangeAt","toString","this","document","execCommand","range","sel","removeAllRanges","addRange","createRange","selectNodeContents","focusNode","collapse","ELEMENTS","type","label","props","placeholder","description","api","commandLink","commandUnlink","ENTER_KEY","CSS","nodes","actionContainer","button","buttonSubmit","input","inputContainer","title","titleContainer","target","targetContainer","inputOpened","toolbar","inlineToolbar","notifier","apiSelection","styles","inlineToolButton","buttonActive","inlineToolButtonActive","inputShowed","styleId","getElementById","style","createElement","id","innerHTML","head","appendChild","addInlineStyles","a","href","rel","classList","add","innerText","onclick","dataEntered","forEach","element","containerName","keys","checked","addEventListener","event","keyCode","preventDefault","restore","removeFakeBackground","setFakeBackground","save","parentAnchor","findParentTag","expandToTag","unlink","closeActions","checkState","close","toggleActions","anchorTag","openActions","hrefAttr","getAttribute","titleAttr","targetAttr","remove","needFocus","focus","clearSavedSelection","currentSelection","clearSaved","trim","validateURL","prepareLink","insertLink","stopPropagation","stopImmediatePropagation","collapseToEnd","show","message","str","test","link","newLink","addProtocol","isInternal","isAnchor","substring","isProtocolRelative","text","isInline"],"mappings":"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","file":"bundle.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"EditorjsInlineTooltip\"] = factory();\n\telse\n\t\troot[\"EditorjsInlineTooltip\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * NOTE: SelectionUtils was mainly taken from EditorJS, due to the fact that it\n * is required to properly create a custom LinkInlineTool. EditorJs does not\n * expose all required methods, so we had to copy it.\n * ==> Issue: https://github.com/codex-team/editor.js/issues/1066\n *\n * @see https://github.com/codex-team/editor.js/blob/737ba2abb423665257cf6ccc5e8472742433322f/src/components/selection.ts\n */\n\n/**\n * Working with selection\n * @typedef {SelectionUtils} SelectionUtils\n */\nexport default class SelectionUtils {\n  public instance: Selection = null;\n\n  public selection: Selection = null;\n\n  /**\n   * This property can store SelectionUtils's range for restoring later\n   * @type {Range|null}\n   */\n  public savedSelectionRange: Range = null;\n\n  /**\n   * Fake background is active\n   *\n   * @return {boolean}\n   */\n  public isFakeBackgroundEnabled = false;\n\n  /**\n   * Native Document's commands for fake background\n   */\n  private readonly commandBackground: string = \"backColor\";\n\n  private readonly commandRemoveFormat: string = \"removeFormat\";\n\n  /**\n   * Return first range\n   * @return {Range|null}\n   */\n  static get range(): Range {\n    const selection = window.getSelection();\n\n    return selection && selection.rangeCount ? selection.getRangeAt(0) : null;\n  }\n\n  /**\n   * Returns selected text as String\n   * @returns {string}\n   */\n  static get text(): string {\n    return window.getSelection ? window.getSelection().toString() : \"\";\n  }\n\n  /**\n   * Returns window SelectionUtils\n   * {@tooltip https://developer.mozilla.org/ru/docs/Web/API/Window/getSelection}\n   * @return {Selection}\n   */\n  public static get(): Selection {\n    return window.getSelection();\n  }\n\n  /**\n   * Removes fake background\n   */\n  public removeFakeBackground() {\n    if (!this.isFakeBackgroundEnabled) {\n      return;\n    }\n\n    this.isFakeBackgroundEnabled = false;\n    document.execCommand(this.commandRemoveFormat);\n  }\n\n  /**\n   * Sets fake background\n   */\n  public setFakeBackground() {\n    document.execCommand(this.commandBackground, false, \"#ff0000\");\n    this.isFakeBackgroundEnabled = true;\n  }\n\n  /**\n   * Save SelectionUtils's range\n   */\n  public save(): void {\n    this.savedSelectionRange = SelectionUtils.range;\n  }\n\n  /**\n   * Restore saved SelectionUtils's range\n   */\n  public restore(): void {\n    if (!this.savedSelectionRange) {\n      return;\n    }\n\n    const sel = window.getSelection();\n\n    sel.removeAllRanges();\n    sel.addRange(this.savedSelectionRange);\n  }\n\n  /**\n   * Clears saved selection\n   */\n  public clearSaved(): void {\n    this.savedSelectionRange = null;\n  }\n\n  /**\n   * Collapse current selection\n   */\n  public collapseToEnd(): void {\n    const sel = window.getSelection();\n    const range = document.createRange();\n\n    range.selectNodeContents(sel.focusNode);\n    range.collapse(false);\n    sel.removeAllRanges();\n    sel.addRange(range);\n  }\n}\n","import * as EditorJS from \"@editorjs/editorjs\";\n\nimport SelectionUtils from \"./selection\";\n\ninterface IContainers {\n  inputContainer: HTMLDivElement;\n  titleContainer: HTMLDivElement;\n  targetContainer: HTMLDivElement;\n}\n\ninterface IInputs {\n  input: HTMLInputElement;\n  title: HTMLInputElement;\n  target: HTMLInputElement;\n}\n\ninterface INodes extends IContainers, IInputs {\n  button: HTMLButtonElement;\n  buttonSubmit: HTMLButtonElement;\n  actionContainer: HTMLDivElement;\n}\n\ntype AllowedNodes = keyof IInputs;\n\nconst ELEMENTS: {\n  type: \"input\";\n  name: AllowedNodes;\n  label: string;\n  description?: string;\n  props: {\n    placeholder?: string;\n    type?: string;\n  };\n}[] = [\n  {\n    type: \"input\",\n    name: \"input\",\n    label: \"URL\",\n    props: {\n      placeholder: \"URL\",\n    },\n  },\n  {\n    type: \"input\",\n    name: \"title\",\n    label: \"Title\",\n    props: {\n      placeholder: \"Title\",\n    },\n  },\n  {\n    type: \"input\",\n    name: \"target\",\n    label: \"Target\",\n    description: \"Open in new Window\",\n    props: {\n      type: \"checkbox\",\n    },\n  },\n];\n\nconst addInlineStyles = () => {\n  const styleId = \"inline-tool-styling\";\n  if (!document.getElementById(styleId)) {\n    const style = document.createElement(\"style\");\n    style.id = styleId;\n    style.innerHTML = `\n        .ce-inline-link-tool.ce-inline-tool-input--showed {\n          padding: 0;\n        }\n        .ce-inline-tool-container {\n          border-top: 1px solid rgba(201,201,204,.48);\n          padding: 5px;\n          padding-left: 10px;\n        }\n        .ce-inline-tool-container label span:first-child  {\n          padding-right: 10px;\n          width: 30px;\n          display: inline-block;\n        }\n        .ce-inline-tool-container input {\n          outline: none;\n          border: 0;\n          border-radius: 0 0 4px 4px;\n          margin: 0;\n          font-size: 13px;\n          margin: 5px;\n          -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n          font-weight: 500;\n        }\n        .ce-inline-tool-container input + span {\n          padding-left: 5px;\n        }\n        .ce-inline-link-tool button {\n          outline: none;\n          padding: 5px 10px;\n          background: transparent;\n          margin-left: 10px;\n          display: block;\n          margin-bottom: 10px;\n          box-sizing: border-box;\n        }\n    `;\n    document.head.appendChild(style);\n  }\n};\n\n/**\n * Link Tool (Inline Toolbar Tool), wraps selected text with <a> tag\n *\n * Mainly inspired by EditorJS', but extended with own features like:\n * - target setting\n * - alternative text and title attribute\n * @see https://github.com/codex-team/editor.js/blob/737ba2abb423665257cf6ccc5e8472742433322f/src/components/inline-tools/inline-tool-link.ts\n */\nexport class LinkInlineTool implements EditorJS.InlineTool {\n  /**\n   * Specifies Tool as Inline Toolbar Tool\n   *\n   * @return {boolean}\n   */\n  public static isInline = true;\n\n  /**\n   * Title for hover-tooltip\n   */\n  public static title = \"Link\";\n\n  /**\n   * Set a shortcut\n   */\n  public get shortcut(): string {\n    return \"CMD+K\";\n  }\n\n  /**\n   * Sanitizer Rule\n   * Leave <a> tags\n   * @return {object}\n   */\n  static get sanitize(): EditorJS.SanitizerConfig {\n    return {\n      a: {\n        href: true,\n        rel: \"nofollow\",\n        target: \"_blank\",\n        title: true,\n      },\n    };\n  }\n\n  /**\n   * Native Document's commands for insertHTML and unlink\n   * @see https://stackoverflow.com/a/23891233/1238150\n   */\n  private readonly commandLink: string = \"insertHTML\";\n\n  private readonly commandUnlink: string = \"unlink\";\n\n  /**\n   * Enter key code\n   */\n  private readonly ENTER_KEY = 13 as const;\n\n  /**\n   * Styles\n   */\n  private CSS: {\n    button: string;\n    buttonActive: string;\n    input: string;\n    inputShowed: string;\n  } = null;\n\n  /**\n   * Elements\n   */\n  private nodes: INodes = {\n    actionContainer: null,\n    button: null,\n    buttonSubmit: null,\n    input: null,\n    inputContainer: null,\n    title: null,\n    titleContainer: null,\n    target: null,\n    targetContainer: null,\n  };\n\n  /**\n   * SelectionUtils instance\n   */\n  private selection: SelectionUtils;\n\n  private apiSelection: EditorJS.API[\"selection\"];\n\n  /**\n   * Input opening state\n   */\n  private inputOpened = false;\n\n  /**\n   * Available Toolbar methods (open/close)\n   */\n  private toolbar: any;\n\n  /**\n   * Available inline toolbar methods (open/close)\n   */\n  private inlineToolbar: any;\n\n  /**\n   * Notifier API methods\n   */\n  private notifier: any;\n\n  /**\n   * @param {{api: API}} - Editor.js API\n   */\n  constructor({ api }: { api: EditorJS.API }) {\n    this.toolbar = api.toolbar;\n    this.inlineToolbar = api.inlineToolbar;\n    this.notifier = api.notifier;\n    this.apiSelection = api.selection;\n    this.selection = new SelectionUtils();\n\n    /**\n     * CSS classes\n     */\n    this.CSS = {\n      button: api.styles.inlineToolButton,\n      buttonActive: api.styles.inlineToolButtonActive,\n      input: \"ce-inline-tool-input\",\n      inputShowed: \"ce-inline-tool-input--showed\",\n    };\n\n    addInlineStyles();\n  }\n\n  /**\n   * Create button for Inline Toolbar\n   */\n  public render(): HTMLElement {\n    this.nodes.button = document.createElement(\"button\") as HTMLButtonElement;\n    this.nodes.button.type = \"button\";\n    this.nodes.button.classList.add(this.CSS.button);\n    this.nodes.button.innerHTML = `<svg class=\"icon icon--link\" width=\"14px\" height=\"10px\"><use xmlns:xlink=\"http://www.w3.org/1999/xlink\" xlink:href=\"#link\"></use></svg>`;\n    return this.nodes.button;\n  }\n\n  /**\n   * Input for the link edit view\n   *\n   * the DOM structure for each input looks like this:\n   *\n   * ```\n   * <div class=\"ce-inline-link-tool\">\n   *  <div class=\"ce-inline-tool-container\">\n   *    <label>\n   *      <span>Label</span>\n   *      <input />\n   *      <span>Description</span> // optional\n   *    </label>\n   *  </div>\n   *  // ... other link inputs\n   *  <button />\n   * </div>\n   * ```\n   */\n  public renderActions(): HTMLElement {\n    // Container holds all elements of the Inline Tool Actions\n    this.nodes.actionContainer = document.createElement(\"div\");\n    this.nodes.actionContainer.classList.add(\"ce-inline-link-tool\");\n    this.nodes.actionContainer.classList.add(this.CSS.input);\n\n    // the submit button applies the inline-tool styling to the selected text\n    this.nodes.buttonSubmit = document.createElement(\"button\");\n    this.nodes.buttonSubmit.innerText = \"OK\";\n    this.nodes.buttonSubmit.onclick = this.dataEntered.bind(this);\n\n    // renders each input container (eg. url, href, target)\n    ELEMENTS.forEach((element) => {\n      // wrap each element with a container and a label for better UI/UX\n      const containerName = `${element.name}Container` as keyof IContainers;\n      this.nodes[containerName] = document.createElement(\"div\");\n      this.nodes[containerName].classList.add(\"ce-inline-tool-container\");\n      const label = document.createElement(\"label\");\n      label.innerHTML = `<span>${element.label}</span>`;\n\n      // the element itself, with special treatment of checkbox elements\n      this.nodes[element.name] = document.createElement(element.type);\n      Object.keys(element.props).forEach((key: keyof typeof element.props) => {\n        this.nodes[element.name][key] = element.props[key];\n\n        if (element.props.type === \"checkbox\") {\n          this.nodes[element.name].checked = true;\n        }\n      });\n\n      this.nodes[element.name].addEventListener(\n        \"keydown\",\n        (event: KeyboardEvent) => {\n          // prevent the default action of the ENTER_KEY or the inline-tool will\n          // close\n          if (event.keyCode === this.ENTER_KEY) {\n            event.preventDefault();\n          }\n        }\n      );\n\n      // DOM: Container -> Label -> Input (+ Description)\n      label.appendChild(this.nodes[element.name]);\n\n      if (element.description) {\n        const description = document.createElement(\"span\");\n        description.innerText = element.description;\n        label.appendChild(description);\n      }\n\n      this.nodes[containerName].appendChild(label);\n      this.nodes.actionContainer.appendChild(this.nodes[containerName]);\n    });\n\n    this.nodes.actionContainer.appendChild(this.nodes.buttonSubmit);\n    return this.nodes.actionContainer;\n  }\n\n  /**\n   * Handle clicks on the Inline Toolbar icon\n   * @param {Range} range\n   */\n  public surround(range: Range): void {\n    /**\n     * Range will be null when user makes second click on the 'link icon' to close opened input\n     */\n    if (range) {\n      /**\n       * Save selection before change focus to the input\n       */\n      if (!this.inputOpened) {\n        /** Create blue background instead of selection */\n        this.selection.setFakeBackground();\n        this.selection.save();\n      } else {\n        this.selection.restore();\n        this.selection.removeFakeBackground();\n      }\n      const parentAnchor = this.apiSelection.findParentTag(\"A\");\n\n      /**\n       * Unlink icon pressed\n       */\n      if (parentAnchor) {\n        this.apiSelection.expandToTag(parentAnchor);\n        this.unlink();\n        this.closeActions();\n        this.checkState();\n        this.toolbar.close();\n        return;\n      }\n    }\n\n    this.toggleActions();\n  }\n\n  /**\n   * Check selection and set activated state to button if there are <a> tag\n   * @param {Selection} selection\n   */\n  public checkState(): boolean {\n    const anchorTag = this.apiSelection.findParentTag(\"A\");\n\n    if (anchorTag) {\n      this.nodes.button.classList.add(this.CSS.buttonActive);\n      this.openActions();\n\n      /**\n       * Fill input values\n       */\n      const hrefAttr = anchorTag.getAttribute(\"href\");\n      const titleAttr = anchorTag.getAttribute(\"title\");\n      const targetAttr = anchorTag.getAttribute(\"target\");\n      this.nodes.input.value = hrefAttr || \"\";\n      this.nodes.title.value = titleAttr || \"\";\n      this.nodes.target.checked = targetAttr === \"_blank\";\n\n      // save the current selection, because the editor will loose its selection\n      // during editing links. The selection will be restored later again.\n      this.selection.save();\n    } else {\n      this.nodes.button.classList.remove(this.CSS.buttonActive);\n    }\n\n    return !!anchorTag;\n  }\n\n  /**\n   * Function called with Inline Toolbar closing\n   */\n  public clear(): void {\n    this.closeActions();\n  }\n\n  private toggleActions(): void {\n    if (!this.inputOpened) {\n      this.openActions(true);\n    } else {\n      this.closeActions(false);\n    }\n  }\n\n  /**\n   * @param {boolean} needFocus - on link creation we need to focus input. On editing - nope.\n   */\n  private openActions(needFocus = false): void {\n    this.nodes.actionContainer.classList.add(this.CSS.inputShowed);\n    if (needFocus) {\n      this.nodes.input.focus();\n    }\n    this.inputOpened = true;\n  }\n\n  /**\n   * Close input\n   * @param {boolean} clearSavedSelection — we don't need to clear saved selection\n   *                                        on toggle-clicks on the icon of opened Toolbar\n   */\n  private closeActions(clearSavedSelection = true): void {\n    if (this.selection.isFakeBackgroundEnabled) {\n      // if actions is broken by other selection We need to save new selection\n      const currentSelection = new SelectionUtils();\n      currentSelection.save();\n\n      this.selection.restore();\n      this.selection.removeFakeBackground();\n\n      // and recover new selection after removing fake background\n      currentSelection.restore();\n    }\n\n    // reset stylings and values\n    this.nodes.actionContainer.classList.remove(this.CSS.inputShowed);\n    this.nodes.input.value = \"\";\n    this.nodes.title.value = \"\";\n    this.nodes.target.checked = true;\n    if (clearSavedSelection) {\n      this.selection.clearSaved();\n    }\n    this.inputOpened = false;\n  }\n\n  /**\n   * Submit button pressed\n   */\n  private dataEntered(event: MouseEvent): void {\n    let value = this.nodes.input.value || \"\";\n\n    if (!value.trim()) {\n      this.selection.restore();\n      this.unlink();\n      event.preventDefault();\n      this.closeActions();\n    }\n\n    if (!this.validateURL(value)) {\n      this.notifier.show({\n        message: \"Pasted link is not valid.\",\n        style: \"error\",\n      });\n      return;\n    }\n\n    value = this.prepareLink(value);\n\n    this.selection.restore();\n    this.selection.removeFakeBackground();\n\n    this.insertLink(value);\n\n    /**\n     * Preventing events that will be able to happen\n     */\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n    this.selection.collapseToEnd();\n    this.inlineToolbar.close();\n  }\n\n  /**\n   * Detects if passed string is URL\n   * @param  {string}  str\n   * @return {Boolean}\n   */\n  private validateURL(str: string): boolean {\n    /**\n     * Don't allow spaces\n     */\n    return !/\\s/.test(str);\n  }\n\n  /**\n   * Process link before injection\n   * - sanitize\n   * - add protocol for links like 'google.com'\n   * @param {string} link - raw user input\n   */\n  private prepareLink(link: string): string {\n    let newLink = link;\n    newLink = newLink.trim();\n    newLink = this.addProtocol(newLink);\n    return newLink;\n  }\n\n  /**\n   * Add 'http' protocol to the links like 'example.com', 'google.com'\n   * @param {String} link\n   */\n  private addProtocol(link: string): string {\n    let newLink = link;\n\n    /**\n     * If protocol already exists, do nothing\n     */\n    if (/^(\\w+):(\\/\\/)?/.test(newLink)) {\n      return newLink;\n    }\n\n    /**\n     * We need to add missed HTTP protocol to the link, but skip 2 cases:\n     *     1) Internal links like \"/general\"\n     *     2) Anchors looks like \"#results\"\n     *     3) Protocol-relative URLs like \"//google.com\"\n     */\n    const isInternal = /^\\/[^/\\s]/.test(newLink);\n    const isAnchor = newLink.substring(0, 1) === \"#\";\n    const isProtocolRelative = /^\\/\\/[^/\\s]/.test(newLink);\n\n    if (!isInternal && !isAnchor && !isProtocolRelative) {\n      newLink = `http://${newLink}`;\n    }\n\n    return newLink;\n  }\n\n  /**\n   * Inserts <a> tag with \"href\", \"title\" and \"target\"\n   * @param {string} link - \"href\" value\n   */\n  private insertLink(link: string): void {\n    /**\n     * Edit all link, not selected part\n     */\n    const anchorTag = this.apiSelection.findParentTag(\"A\");\n\n    if (anchorTag) {\n      this.apiSelection.expandToTag(anchorTag);\n    }\n\n    const target = this.nodes.target.checked ? 'target=\"_blank\"' : \"\";\n    const title =\n      this.nodes.title.value !== \"\" ? `title=\"${this.nodes.title.value}\"` : \"\";\n\n    document.execCommand(\n      this.commandLink,\n      false,\n      `<a href=\"${link}\" ${target} ${title}>${SelectionUtils.text}</a>`\n    );\n  }\n\n  /**\n   * Removes <a> tag\n   */\n  private unlink(): void {\n    document.execCommand(this.commandUnlink);\n  }\n}\n"],"sourceRoot":""}